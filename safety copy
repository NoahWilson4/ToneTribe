//http://localhost:3000/song/544c2f365c4cdf0000dd83a5//
///// test song url

////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

this is for signed urls, from app.js

app.post('/submitFoundation', function (req, res) {

  var fName = req.files.audio.name;
  var fPath = req.files.audio.path;
  var cType = req.files.audio.type;
  var size = req.files.audio.size;
  var audio = req.body;

  var key = 'public/' + fName;
  var trackTitle = req.body.trackTitle;
  var songId = req.body.id;
  var trackNumber = req.body.trackNumber;
  console.log('trackNumber!!!!!!!!!!!!!!', trackNumber);
 
  fs.readFile(fPath, function (err, data) {
    console.log(err);
    s3.putObject({
        Bucket: BUCKET,
        Key: 'public/' + fName,
        ACL: 'public-read',
        Body: data
      }, function (err, result) {
          console.log(err, result);


///////////// gets signed url ...  ////////////////////////
          // var trackUrl;
          // var trackETag = result.ETag;

          // var params = {Bucket: BUCKET};
          // s3.listObjects(params, function(err, data){
          //     var bucketContents = data.Contents;
          //     for (var i = 0; i < bucketContents.length; i++){
          //       if (key === bucketContents[i].Key){
          //         console.log('key: ', key, "bucketContents[i].Key)", bucketContents[i].Key);
          //         console.log('match!!!!')
          //         var urlParams = {Bucket: BUCKET, Key: bucketContents[i].Key};
          //         s3.getSignedUrl('getObject',urlParams, function(err, url){
          //           trackUrl = url;
          //         });
          //       }
                 
          //     }
          // });


          // var asyncCount = 0;

          // async.whilst(
          //     function () { return trackUrl === undefined; },
          //     function (callback) {
          //         asyncCount++;
          //         console.log('Waiting for response.....');
          //         setTimeout(callback, 200);
          //     },
          //     function (err) {
          //        var track = {
          //           Key: key,
          //           trackTitle: trackTitle,
          //           ETag: trackETag,
          //           songId: songId,
          //           trackNumber: trackNumber,
          //           url: trackUrl
          //         };

          //       apiController.addTrack(track);
          //     }
          // );

        });
   
    res.redirect('/song/' + songId);
  });
});
////////////////////////////////////////////
/*
  Files uploaded here will be
  publicly accessible
 */
app.post('/submitPublic', function (req, res) {

  var fName = req.files.audio.name;
  var fPath = req.files.audio.path;
  var cType = req.files.audio.type;
  var size = req.files.audio.size;
  var audio = req.body;

  var key = 'public/' + fName;
  var trackTitle = req.body.trackTitle;
  var songId = req.body.id;
  var trackNumber = req.body.trackNumber;
 
  fs.readFile(fPath, function (err, data) {
    console.log(err);
    s3.putObject({
        Bucket: BUCKET,
        Key: 'public/' + fName,
        ACL: 'public-read',
        Body: data
      }, function (err, result) {
          console.log(err, result);

//////// gets signed url ... ///////////////////
          // var trackUrl;
          // var trackETag = result.ETag;

          // var params = {Bucket: BUCKET};
          // s3.listObjects(params, function(err, data){
          //     var bucketContents = data.Contents;
          //     for (var i = 0; i < bucketContents.length; i++){
          //       if (key === bucketContents[i].Key){
          //         console.log('key: ', key, "bucketContents[i].Key)", bucketContents[i].Key);
          //         console.log('match!!!!')
          //         var urlParams = {Bucket: BUCKET, Key: bucketContents[i].Key};
          //         s3.getSignedUrl('getObject',urlParams, function(err, url){
          //           trackUrl = url;
          //         });
          //       }
                 
          //     }
          // });


          // var asyncCount = 0;

          // async.whilst(
          //     function () { return trackUrl === undefined; },
          //     function (callback) {
          //         asyncCount++;
          //         console.log('Waiting for response.....');
          //         setTimeout(callback, 200);
          //     },
          //     function (err) {
          //        var track = {
          //           Key: key,
          //           trackTitle: trackTitle,
          //           ETag: trackETag,
          //           songId: songId,
          //           trackNumber: trackNumber,
          //           url: trackUrl
          //         };

          //       apiController.addTrack(track);
          //     }
          // );

        });
   
    res.redirect('/song/' + songId);
  });
});



////////////////////////////////
/////////////////////////////////////////
//////////////////////////////////

from index, signed urls.....

song: function(req, res){
		var trackNumAndUrls = [];
		var results;
		var name;
		////// holder for all tracks to be loaded-
		var trackKeys = [[],[],[],[],[],[]];
		
			// console.log('req.params: ', req.params);
			var songId = req.params.id;
			CocreationSong.findOne({_id: songId}, function(err, result){
				// console.log('result: ', result);
				name = result.name;

				
				for (var i = 0; i < result.tracks.length; i++){
					for (var z = 0; z < result.tracks[i].userTracks.length; z++){
							var trackNum = result.tracks[i].track;
							var key = result.tracks[i].userTracks[z].Key;
							var keyAndNum = {
								Key: key,
								track: trackNum
							}

							// console.log('trackNum, keyAndNum: ', trackNum, keyAndNum);
							trackKeys[trackNum].push(keyAndNum);
							
					}
				}
				// console.log('trackKeys: ', trackKeys);
				
				for (var i = 0; i < trackKeys.length; i++){

			/////////////////////////  async parrallel
					async.parallel(
							    // pass an array of built functions
							    trackKeys[i].map(function(key){
														// console.log('key test in map: ', key);
														var params = {Bucket: BUCKET};

														var trackNum = key.track;
														key = key.Key;
														var trackUrl;

												          s3.listObjects(params, function(err, data){
												              var bucketContents = data.Contents;
												              for (var i = 0; i < bucketContents.length; i++){
												                if (key === bucketContents[i].Key){
												                  // console.log('key: ', key, "bucketContents[i].Key)", bucketContents[i].Key);
												                  // console.log('match!!!!')
												                  var urlParams = {Bucket: BUCKET, Key: bucketContents[i].Key};
												                  s3.getSignedUrl('getObject',urlParams, function(err, url){
												                    trackUrl = url;
												               ////////////////////////////////////
															          async.whilst(
															              function () { return trackUrl === undefined; },
															              function (callback) {

															                  // console.log('Waiting for response.....');
															                  setTimeout(callback, 200);
															              },
															              function (err) {
															              	// console.log('in err function...'); 	
															              }
															          );

															          ///////////// use this if i decide i need the key....
												                    		// var results = {
												                    		// 	url: trackUrl,
												                    		// 	Key: key
												                    		// };
												                   /////////  else ...
												                   			results = trackUrl;
												                   			var tAndN ={
												                   				track: trackNum,
												                   				url: results
												                   			}
												                   			// console.log('tAndN', tAndN);

												                    		trackNumAndUrls.push(tAndN);
												                    		// console.log('trackNumAndUrls at bottom of function: ', trackNumAndUrls);

												                  });
												                }
												                 
												              }
												          });			
													}),
								
							    // this last function will be executed when
							    // all the async functions are done
							    function(err, results){
							        // console.log('err async err:', err);
							        console.log('results in async function:', results);
							    }
					);
				var loaded = 0;
				async.whilst(
			              function () { 

			              	var numberOfKeys = _.flatten(trackKeys);
			              	var num = numberOfKeys.length;
			              	// console.log('num: ', num);
			              	var testNum = trackNumAndUrls.length;
			              	// console.log('testNum: ', testNum);

			              	return testNum !== num; 
			              },
			              function (callback) {
			                  
			                  // console.log('Waiting for all urls to be found.....');
			                  setTimeout(callback, 700);
			              },
			              function (err) {
			              	// console.log('Render the page with the right info!!!!!!!!    results:', results, 'trackNumAndUrls: ', trackNumAndUrls);
				              if (loaded === 0) {
				              	loaded++;
								res.render('song', {
									// song: results,
									name: name,
									NumUrls: trackNumAndUrls
								}); 
							  }	
			              }
			          );
				}
				// console.log('trackKeys after async: ', trackKeys);
				// console.log('trackNumAndUrls at end of indexController.song: ', trackNumAndUrls);

			});
		},



		////////////////
		//////////////////////
		///////////////////////////
		////////////////
		//////////////////////
		///////////////////////////

		from app.js.......

		// app.post('/submitFoundation', multer(), function (req, res) {

//   var fName = req.files.audio.name;
//   var fPath = req.files.audio.path;
//   var cType = req.files.audio.type;
//   var size = req.files.audio.size;
//   var audio = req.body;

//   var key = 'public/' + fName;
//   var trackTitle = req.body.trackTitle;
//   var songId = req.body.id;
//   var trackNumber = req.body.trackNumber;
//   var trackUrl = 'https://s3.amazonaws.com/tonetribe/' + key;

//   console.log('trackNumber, trackUrl', trackNumber, trackUrl);
 
//   fs.readFile(fPath, function (err, data) {
//     console.log(err);
//     s3.putObject({
//         Bucket: BUCKET,
//         Key: 'public/' + fName,
//         ACL: 'public-read',
//         Body: data
//       }, function (err, result) {
//           console.log(err, result);
//           var track = {
          
//                 Key: key,
//                 trackTitle: trackTitle,
//                 ETag: trackETag,
//                 songId: songId,
//                 trackNumber: trackNumber,
//                 url: trackUrl
//           };

//           apiController.addTrack(track);

//         });
   
//     res.redirect('/song/' + songId);
//   });
// });
// ////////////////////////////////////////////
// /*
//   Files uploaded here will be
//   publicly accessible
//  */
// app.post('/submitPublic', multer(), function (req, res) {

//   var fName = req.files.audio.name;
//   var fPath = req.files.audio.path;
//   var cType = req.files.audio.type;
//   var size = req.files.audio.size;
//   var audio = req.body;

//   var key = 'public/' + fName;
//   var trackTitle = req.body.trackTitle;
//   var songId = req.body.id;
//   var trackNumber = req.body.trackNumber;
 
//   fs.readFile(fPath, function (err, data) {
//     console.log(err);
//     s3.putObject({
//         Bucket: BUCKET,
//         Key: 'public/' + fName,
//         ACL: 'public-read',
//         Body: data
//       }, function (err, result) {
//           console.log(err, result);

//           var track = {
//               Key: key,
//               trackTitle: trackTitle,
//               ETag: trackETag,
//               songId: songId,
//               trackNumber: trackNumber,
//               url: trackUrl
//           };

//               apiController.addTrack(track);
        
//         });
   
//     res.redirect('/song/' + songId);
//   });
// });

// /*
//   Files uploaded here will only be
//   accessible to the owner of the amazon
//   account. The 'view' route will act as
//   a gate to the content; a proxy.
//  */
// app.post('/submitPrivate', multer(), function (req, res) {
//   console.log(req.files);
//   var fName = req.files.image.name;
//   var fPath = req.files.image.path;
//   var cType = req.files.image.type;
//   var size = req.files.image.size;

//   fs.readFile(fPath, function (err, data) {
//     console.log(err);
//     s3.putObject({
//       Bucket: BUCKET,
//       Key: 'private/' + fName,
//       ContentType: cType,
//       Body: data
//     }, function (err, result) {
//       console.log(err, result);
//       res.redirect('search');
      
//     });
//   });
// });



////////////////
		//////////////////////
		///////////////////////////
		////////////////
		//////////////////////
		///////////////////////////
from main.js....





var propertySearch = function(property, value){
	//////// users ////////////
	$.get('/api/findUsers', {}, function(responseData){
		// We've got a dataset back from the server,
		// so let's build out the display in the DOM
		console.log('findUsers Response:', responseData);

		// Loop through the responseData array...
		
		
	// });
		console.log('test');
			for (var i = 0; i < users.length; i++) {
				var user = users[i];
				var userProp = user[property];
				if ($.isArray(userProp) === true) {
					var propertyArray = lowerCase(userProp);
					var isDuplicate = false;
							for (var z = 0; z < positiveResults.length; z++) {
								var idSearch = positiveResults[z];
								if (idSearch.userId === user.userId) {
									isDuplicate = true;
								}
								if ( isDuplicate === false){
									positiveResults.push(users[i]);
								}						
							}
				} else {
					var userProp = lowerCase(userProp);
					if (userProp === value) {
						var isDuplicate = false;
							for (var z = 0; z < positiveResults.length; z++) {
								var idSearch = positiveResults[z];
								if (idSearch.userId === user.userId) {
									isDuplicate = true;
								}
								if ( isDuplicate === false){
									positiveResults.push(users[i]);
								}						
							}
					}
				}
			}
	});
};
		////// bands //////////
			// for (var i = 0; i < bands.length; i++) {
			// 	var band = bands[i];
			// 	var bandProp = band[property];
			// 	if ($.isArray(bandProp) === true) {
			// 		console.log('band array being searched');
			// 		var propertyArray = lowerCase(bandProp);
			// 		var isDuplicate = false;
			// 				for (var z = 0; z < positiveResultsBands.length; z++) {
			// 					var idSearch = positiveResultsBands[z];
			// 					if (idSearch.bandId === band.bandId) {
			// 						isDuplicate = true;
			// 					}
			// 					if ( isDuplicate === false){
			// 						positiveResultsBands.push(bands[i]);
			// 					}						
			// 				}
			// 	} else {
			// 		var bandProp = lowerCase(bandProp);
			// 		if (bandProp === value) {
			// 			var isDuplicate = false;
			// 				for (var z = 0; z < positiveResultsBands.length; z++) {
			// 					var idSearch = positiveResultsBands[z];
			// 					if (idSearch.bandId === band.bandId) {
			// 						isDuplicate = true;
			// 					}
			// 					// }
			// 					if ( isDuplicate === false){
			// 						positiveResultsBands.push(bands[i]);
			// 					}						
			// 				}
			// 		}
			// 	}
			// };


		var positiveResultsBands = [];
		var positiveResultsFinalBands = [];

		var positiveResults = [];
		var positiveResultsFinal = [];
		
		$('#submitSearch').on('submit', function(e){
			$('.search-result-info').hide();
			$('#search-results-musicians').empty();
			$('#search-results-bands').empty();
			e.preventDefault();
			var form = $(e.target);
			var searchedFor = [];
			var searchedForValue = [];
			form.find('.searchInput')
				.map(function() {
				return {
					name: $(this).attr('name'),
					value: lowerCase($(this).val())
					}
					})
					.toArray()
					.filter(function(searchObject) {
						return searchObject.value;
					})
					.forEach(function(searchObject) {
						searchedFor.push(searchObject.name);
						searchedForValue.push(searchObject.value);
						propertySearch(searchObject.name, searchObject.value);
					});
					console.log('searchedFor: ', searchedFor);
					console.log('searchedForValue: ', searchedForValue);
					console.log('positiveResults: ', positiveResults);
			console.log('positiveResultsBands', positiveResultsBands);
		///// users /////////
			for (var i = 0; i < positiveResults.length; i++) {
				var userToQualify = positiveResults[i];
				var matches = 0;

				for (var x = 0; x < searchedFor.length; x++){
								
					var key = searchedFor[x];
					var value = searchedForValue[x];
					var userKey = userToQualify[key];

					if ( $.isArray(userKey)) {
						for (var z = 0; z < userKey.length; z++) {
							if (userKey[z] === value) {
						matches++;
							}
						}
					}
					var userValue = userToQualify[key];
					userValue = lowerCase(userValue);
					if ( userValue === value ) {
						matches++;
					}
					if (matches === searchedFor.length) {
						positiveResultsFinal.push(positiveResults[i]);
					}
				}	
			};
		///// bands /////////
			for (var i = 0; i < positiveResultsBands.length; i++) {
				var userToQualify = positiveResultsBands[i];
				console.log('band to qualify test: ', userToQualify);
				var matches = 0;

				for (var x = 0; x < searchedFor.length; x++){
								
					var key = searchedFor[x];
					var value = searchedForValue[x];
					var userKey = userToQualify[key];
					console.log('searchedFor test: ', searchedFor);
					console.log('searchedForValue test: ', searchedForValue);
					console.log('band to qualify key test: ', userKey);

					if ( $.isArray(userKey)) {
						for (var z = 0; z < userKey.length; z++) {
							if (userKey[z] === value) {
						matches++;
							}
						}
					}
					var userValue = userToQualify[key];
					userValue = lowerCase(userValue);
					if ( userValue === value ) {
						matches++;
					}
					if (matches === searchedFor.length) {
						positiveResultsFinalBands.push(positiveResultsBands[i]);
					}
				}	
			};

			console.log('positiveResultsFinal: ', positiveResultsFinal);
			console.log('positiveResultsFinalBands', positiveResultsFinalBands);
				

	/////// search page rendering and displaying results ////////

				$('.search-results').show();
				$('.search-form').hide();
		
				

				for (var i = 0; i < positiveResultsFinal.length; i++){
					var result = positiveResultsFinal[i];
					result.displayResultsMusicians();
				}
				if (positiveResultsFinal.length < 1 && positiveResultsFinalBands < 1) {
					$('.search-result-info').show();
				}

				for (var i = 0; i < positiveResultsFinalBands.length; i++){
					var result = positiveResultsFinalBands[i];
					result.displayResultsBands();
				}
				// if (positiveResultsFinalBands.length < 1) {
				// 	$('#search-results-container').prepend('<div class="list-group results"</div><div class="search-result-info"><h4 class="list-group-item-heading">No results found.</h4></div>')
				// }

		});
	// $('.search-results').hide();

